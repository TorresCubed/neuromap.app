{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from \"react\";\nimport update from \"immutability-helper\";\nimport axios from \"axios\";\nexport function useIdeaManager() {\n  _s();\n\n  const [selectedId, setSelectedId] = useState(\"a\");\n  const [ideas, ideasDispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"update\":\n        return update(state, {\n          [action.id]: {\n            $merge: action.data\n          }\n        });\n\n      case \"create\":\n        axios.post(\"http://localHost:9999/api/v1/ideas\", Object.assign({\n          id: action.id,\n          linkList: []\n        }, action.data)).then(res => console.log(\"successful addition\"));\n        return update(state, {\n          [action.id]: {\n            $set: Object.assign({\n              id: action.id,\n              linkList: new Set()\n            }, action.data)\n          }\n        });\n\n      case \"link\":\n        axios.put(`http://localHost:9999/api/v1/ideas/${action.fromId}`, {\n          link: action.toid\n        }).then(res => console.log(\"successful link\"));\n        return update(state, {\n          [action.fromId]: {\n            linkList: {\n              $add: [action.toId]\n            }\n          }\n        });\n\n      case \"delete\":\n        axios.delete(`http://localHost:9999/api/v1/ideas/${action.deleteId}`).then(res => console.log(\"successful delete\"));\n        return update(state, {\n          $unset: [action.deleteId]\n        });\n\n      case \"initialIdeas\":\n        return update(state, {\n          $set: action.data\n        });\n\n      default:\n        throw new Error(`Unexpected action type: ${action.type}`);\n    }\n  }, {} // {\n  //   a: {\n  //     id: \"a\",\n  //     top: 20,\n  //     left: 80,\n  //     content: \"Here is an Example to get you Started\",\n  //     linkList: new Set(\"b\"),\n  //   },\n  //   b: {\n  //     id: \"b\",\n  //     top: 180,\n  //     left: 20,\n  //     content: \"Great Idea!\",\n  //     linkList: new Set(),\n  //   },\n  // },\n  );\n  useEffect(() => {\n    const ideasImport = {};\n    axios.get(\"http://localHost:9999/api/v1/ideas\").then(res => {\n      res.data.forEach(element => {\n        element.linkList = new Set(element.linkList);\n        ideasImport[element.id] = element;\n      });\n      ideasDispatch({\n        type: \"initialIdeas\",\n        data: ideasImport\n      });\n    });\n  }, []);\n  return {\n    ideas: ideas,\n    ideasDispatch: ideasDispatch,\n    selectedId: selectedId,\n    setSelectedId: setSelectedId\n  };\n}\n\n_s(useIdeaManager, \"Z0cV0aGZNHG/cy13ZIxAvJR5giA=\");\n\nexport const IdeaContext = /*#__PURE__*/React.createContext();","map":{"version":3,"sources":["C:/Users/torre/Documents/neuromap.app/src/main/frontend/src/IdeaContext.js"],"names":["React","useEffect","useReducer","useState","update","axios","useIdeaManager","selectedId","setSelectedId","ideas","ideasDispatch","state","action","type","id","$merge","data","post","Object","assign","linkList","then","res","console","log","$set","Set","put","fromId","link","toid","$add","toId","delete","deleteId","$unset","Error","ideasImport","get","forEach","element","IdeaContext","createContext"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\r\nimport update from \"immutability-helper\";\r\nimport axios from \"axios\";\r\n\r\nexport function useIdeaManager() {\r\n  const [selectedId, setSelectedId] = useState(\"a\");\r\n\r\n  \r\n\r\n  const [ideas, ideasDispatch] = useReducer(\r\n    (state, action) => {\r\n      switch (action.type) {\r\n        case \"update\":\r\n          return update(state, {\r\n            [action.id]: {\r\n              $merge: action.data,\r\n            },\r\n          });\r\n        case \"create\":\r\n          axios.post(\"http://localHost:9999/api/v1/ideas\", \r\n                    Object.assign({\r\n                      id:action.id,linkList: []}, action.data)\r\n          ).then(res => console.log(\"successful addition\"))\r\n          return update(state, {\r\n            [action.id]: {\r\n              $set: Object.assign(\r\n                { id: action.id, linkList: new Set() },\r\n                action.data\r\n              ),\r\n            },\r\n          });\r\n        case \"link\":\r\n          axios.put(`http://localHost:9999/api/v1/ideas/${action.fromId}`, {link:action.toid}\r\n          ).then(res => console.log(\"successful link\"))\r\n          return update(state, {\r\n            [action.fromId]: {\r\n              linkList: { $add: [action.toId] },\r\n            },\r\n          });\r\n        case \"delete\":\r\n          axios.delete(`http://localHost:9999/api/v1/ideas/${action.deleteId}`)\r\n          .then(res => console.log(\"successful delete\"))\r\n          return update(state, \r\n            {$unset: [action.deleteId]}\r\n          )\r\n        case \"initialIdeas\":\r\n            return update(state, {\r\n              $set:action.data\r\n            });\r\n        default:\r\n          throw new Error(`Unexpected action type: ${action.type}`);\r\n      }\r\n    },{}\r\n    // {\r\n    //   a: {\r\n    //     id: \"a\",\r\n    //     top: 20,\r\n    //     left: 80,\r\n    //     content: \"Here is an Example to get you Started\",\r\n    //     linkList: new Set(\"b\"),\r\n    //   },\r\n    //   b: {\r\n    //     id: \"b\",\r\n    //     top: 180,\r\n    //     left: 20,\r\n    //     content: \"Great Idea!\",\r\n    //     linkList: new Set(),\r\n    //   },\r\n    // },\r\n  )\r\n  \r\n  useEffect(() => {\r\n    const ideasImport = {};\r\n    axios.get(\"http://localHost:9999/api/v1/ideas\").then(\r\n      res =>{\r\n        res.data.forEach(element => {\r\n        element.linkList = new Set(element.linkList)\r\n        ideasImport[element.id] = element;\r\n      });\r\n      \r\n        ideasDispatch({\r\n          type: \"initialIdeas\",\r\n          data: ideasImport\r\n        });\r\n      }\r\n    )\r\n    \r\n  }, [])\r\n\r\n  return {\r\n    ideas: ideas,\r\n    ideasDispatch: ideasDispatch,\r\n    selectedId: selectedId,\r\n    setSelectedId: setSelectedId,\r\n  };\r\n}\r\n\r\nexport const IdeaContext = React.createContext();\r\n"]},"metadata":{},"sourceType":"module"}