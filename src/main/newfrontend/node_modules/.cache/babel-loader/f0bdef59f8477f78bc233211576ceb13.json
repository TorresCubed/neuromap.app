{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\torre\\\\Documents\\\\neuromap.app\\\\src\\\\main\\\\frontend\\\\src\\\\FreeformIdeas.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useState, useRef, useEffect } from \"react\";\nimport { IdeaContext } from \"./IdeaContext\";\nimport { ThemeContext } from \"./ThemeContext\";\nimport { useDrop } from \"react-dnd\";\nimport { Idea } from \"./Idea\";\nimport { ItemTypes } from \"./ItemTypes\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Modal from \"./Modal\";\nimport IdeaForm from \"./IdeaForm\";\nimport update from \"immutability-helper\";\nimport Arrow from \"./Arrow\";\nimport \"./FreeFormIdeas.css\";\n/**\r\n * Calculates the coordinates of the end of arrow, pointing to the idea\r\n *\r\n * @param {{ height: number, width: number, top: number, left: number }} idea The idea the arrow is pointing to/from\r\n * @param {number} arrowRotation The rotation of the arrow (in degrees) in the range (-180, 180]\r\n * @returns {[number, number]} The coordinates ([top, left]) of the end of the arrow\r\n */\n\nexport function calcCoords(idea, arrowRotation) {\n  const {\n    height,\n    width,\n    top: ideaTop,\n    left: ideaLeft\n  } = idea;\n  const posArrowRotation = Math.abs(arrowRotation);\n  const referenceAngleOne = 180 / Math.PI * Math.atan2(height, width);\n  const referenceAngleTwo = 180 - referenceAngleOne;\n  let top, left;\n\n  if (posArrowRotation > referenceAngleOne && posArrowRotation < referenceAngleTwo) {\n    top = ideaTop + (arrowRotation < 0 ? 0 : height);\n    left = ideaLeft + width / 2 + height / 2 * Math.tan((90 - posArrowRotation) * Math.PI / 180);\n  } else {\n    const isOnRight = posArrowRotation <= referenceAngleOne;\n    top = ideaTop + height / 2 + width / 2 * Math.tan((isOnRight ? arrowRotation : 180 - arrowRotation) * Math.PI / 180);\n    left = ideaLeft + (isOnRight ? width : 0);\n  }\n\n  return [top, left].map(Math.round);\n}\n\nconst FreeFormIdeas = () => {\n  _s();\n\n  const {\n    theme\n  } = useContext(ThemeContext);\n  const {\n    ideas,\n    ideasDispatch,\n    selectedId,\n    setSelectedId\n  } = useContext(IdeaContext);\n  const selectedIdea = ideas[selectedId];\n  const [coords, setCoords] = useState({\n    top: 0,\n    left: 0\n  });\n  const [showIdeaModal, setShowIdeaModal] = useState(false);\n  const ideaModalShow = useCallback(() => setShowIdeaModal(true), []);\n  const ideaModalHide = useCallback(() => setShowIdeaModal(false), []);\n  const [linkerEnd, setLinkerEnd] = useState();\n  const [linkerStart, setlinkerStart] = useState();\n  const [linkingState, setLinkingState] = useState(false);\n  const linkBreak = useCallback(() => setLinkingState(false), []);\n  const domElement = useRef();\n  const [canvasOffset, setcanvasOffset] = useState(60);\n\n  const updateCanvasOffset = () => {\n    setcanvasOffset(domElement.current.getBoundingClientRect().y);\n  };\n\n  const handleLinkAdjust = useCallback((startId, endId, start, end) => {\n    ideasDispatch({\n      type: \"deleteLink\",\n      ideaId: startId,\n      linkToRemove: endId\n    });\n    setLinkerEnd(end);\n    setlinkerStart(start);\n    setLinkingState(true);\n  }, [ideasDispatch]);\n  const handleLinkStart = useCallback(e => {\n    console.log(selectedIdea);\n    setLinkerEnd([e.clientY - canvasOffset, e.clientX]);\n    setlinkerStart([[selectedIdea.top, selectedIdea.left]]);\n    setLinkingState(true);\n  }, [canvasOffset, selectedIdea]);\n  const adjustLinker = useCallback(e => {\n    if (!linkingState) return;\n    setLinkerEnd([e.clientY - canvasOffset, e.clientX]);\n  }, [linkingState, canvasOffset]);\n  const handleLinkEnd = useCallback(ideaId => {\n    setLinkingState(false);\n    if (ideaId === selectedId || !linkingState) return;\n    ideasDispatch({\n      type: \"createLink\",\n      fromId: selectedId,\n      toId: ideaId\n    });\n  }, [selectedId, linkingState, ideasDispatch]);\n  const [, drop] = useDrop({\n    accept: ItemTypes.IDEA,\n\n    drop(item, monitor) {\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      ideasDispatch({\n        type: \"update\",\n        ideaId: item.ideaId,\n        data: {\n          left,\n          top\n        }\n      });\n    }\n\n  });\n  const editIdea = useCallback(ideaId => {\n    setSelectedId(ideaId);\n    ideaModalShow(true);\n  }, [ideaModalShow, setSelectedId]);\n  const handleDoubleClick = useCallback(e => {\n    if (e.target.className !== \"FreeFormIdeas\") return;\n    e.preventDefault();\n    setCoords({\n      top: e.clientY - canvasOffset,\n      left: e.clientX\n    });\n    console.log(ideas);\n    setSelectedId(uuidv4());\n    setTimeout(ideaModalShow, 300);\n  }, [ideas, ideaModalShow, setSelectedId, canvasOffset]);\n  const handleIdeaChange = useCallback(idea => {\n    ideaModalHide();\n    if (idea.content === \"\") return;\n\n    if (!idea.ideaId) {\n      ideasDispatch({\n        type: \"createIdea\",\n        ideaId: selectedId,\n        data: update(idea, {\n          $merge: coords\n        })\n      });\n      return;\n    }\n\n    ideasDispatch({\n      type: \"update\",\n      ideaId: selectedId,\n      data: idea\n    });\n  }, [coords, selectedId, ideasDispatch, ideaModalHide]);\n  const domElementRef = useCallback(domElementReference => {\n    domElement.current = domElementReference;\n    updateCanvasOffset();\n    drop(domElementReference);\n  }, [drop]);\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateCanvasOffset);\n    return () => {\n      window.removeEventListener(\"resize\", updateCanvasOffset);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: domElementRef,\n    className: \"FreeFormIdeas\",\n    style: {\n      background: theme.freeFormIdeasColor\n    },\n    onDoubleClick: handleDoubleClick,\n    onMouseUp: linkBreak,\n    onMouseMove: adjustLinker,\n    children: [showIdeaModal && /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: ideaModalHide,\n      children: /*#__PURE__*/_jsxDEV(IdeaForm, {\n        onSubmit: handleIdeaChange,\n        idea: selectedIdea\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), Object.entries(ideas).map(([key, idea]) => /*#__PURE__*/_jsxDEV(Idea, {\n      onEdit: editIdea,\n      onSelect: setSelectedId,\n      selected: idea.ideaId === selectedId,\n      onLinkStart: handleLinkStart,\n      onLinkEnd: handleLinkEnd,\n      ...idea\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this)), Array.from((selectedIdea === null || selectedIdea === void 0 ? void 0 : selectedIdea.linkList) || [], endId => {\n      const arrowHeight = ideas[endId].top + ideas[endId].height / 2 - (selectedIdea.top + selectedIdea.height / 2);\n      const arrowWidth = ideas[endId].left + ideas[endId].width / 2 - (selectedIdea.left + selectedIdea.width / 2);\n      const arrowRotationStart = 180 / Math.PI * Math.atan2(arrowHeight, arrowWidth);\n      const arrowRotationEnd = arrowRotationStart - 180 * Math.sign(arrowRotationStart);\n      return /*#__PURE__*/_jsxDEV(Arrow, {\n        startId: selectedId,\n        endId: endId,\n        start: calcCoords(selectedIdea, arrowRotationStart),\n        end: calcCoords(ideas[endId], arrowRotationEnd),\n        onLinkAdjust: handleLinkAdjust\n      }, `${selectedId} -> ${endId}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this);\n    }), linkingState && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"linkingArrow\",\n      children: /*#__PURE__*/_jsxDEV(Arrow, {\n        start: linkerStart,\n        end: linkerEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FreeFormIdeas, \"XYx08rDjHV/m7wo83HGjL+WsZ5I=\", false, function () {\n  return [useDrop];\n});\n\n_c = FreeFormIdeas;\nexport default FreeFormIdeas;\n\nvar _c;\n\n$RefreshReg$(_c, \"FreeFormIdeas\");","map":{"version":3,"sources":["C:/Users/torre/Documents/neuromap.app/src/main/frontend/src/FreeformIdeas.js"],"names":["React","useCallback","useContext","useState","useRef","useEffect","IdeaContext","ThemeContext","useDrop","Idea","ItemTypes","v4","uuidv4","Modal","IdeaForm","update","Arrow","calcCoords","idea","arrowRotation","height","width","top","ideaTop","left","ideaLeft","posArrowRotation","Math","abs","referenceAngleOne","PI","atan2","referenceAngleTwo","tan","isOnRight","map","round","FreeFormIdeas","theme","ideas","ideasDispatch","selectedId","setSelectedId","selectedIdea","coords","setCoords","showIdeaModal","setShowIdeaModal","ideaModalShow","ideaModalHide","linkerEnd","setLinkerEnd","linkerStart","setlinkerStart","linkingState","setLinkingState","linkBreak","domElement","canvasOffset","setcanvasOffset","updateCanvasOffset","current","getBoundingClientRect","y","handleLinkAdjust","startId","endId","start","end","type","ideaId","linkToRemove","handleLinkStart","e","console","log","clientY","clientX","adjustLinker","handleLinkEnd","fromId","toId","drop","accept","IDEA","item","monitor","delta","getDifferenceFromInitialOffset","x","data","editIdea","handleDoubleClick","target","className","preventDefault","setTimeout","handleIdeaChange","content","$merge","domElementRef","domElementReference","window","addEventListener","removeEventListener","background","freeFormIdeasColor","Object","entries","key","Array","from","linkList","arrowHeight","arrowWidth","arrowRotationStart","arrowRotationEnd","sign"],"mappings":"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","sourcesContent":["import React, {\r\n  useCallback,\r\n  useContext,\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n} from \"react\";\r\nimport { IdeaContext } from \"./IdeaContext\";\r\nimport { ThemeContext } from \"./ThemeContext\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { Idea } from \"./Idea\";\r\nimport { ItemTypes } from \"./ItemTypes\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Modal from \"./Modal\";\r\nimport IdeaForm from \"./IdeaForm\";\r\nimport update from \"immutability-helper\";\r\nimport Arrow from \"./Arrow\";\r\nimport \"./FreeFormIdeas.css\";\r\n\r\n/**\r\n * Calculates the coordinates of the end of arrow, pointing to the idea\r\n *\r\n * @param {{ height: number, width: number, top: number, left: number }} idea The idea the arrow is pointing to/from\r\n * @param {number} arrowRotation The rotation of the arrow (in degrees) in the range (-180, 180]\r\n * @returns {[number, number]} The coordinates ([top, left]) of the end of the arrow\r\n */\r\nexport function calcCoords(idea, arrowRotation) {\r\n  const { height, width, top: ideaTop, left: ideaLeft } = idea;\r\n  const posArrowRotation = Math.abs(arrowRotation);\r\n  const referenceAngleOne = (180 / Math.PI) * Math.atan2(height, width);\r\n  const referenceAngleTwo = 180 - referenceAngleOne;\r\n  let top, left;\r\n\r\n  if (\r\n    posArrowRotation > referenceAngleOne &&\r\n    posArrowRotation < referenceAngleTwo\r\n  ) {\r\n    top = ideaTop + (arrowRotation < 0 ? 0 : height);\r\n    left =\r\n      ideaLeft +\r\n      width / 2 +\r\n      (height / 2) * Math.tan(((90 - posArrowRotation) * Math.PI) / 180);\r\n  } else {\r\n    const isOnRight = posArrowRotation <= referenceAngleOne;\r\n\r\n    top =\r\n      ideaTop +\r\n      height / 2 +\r\n      (width / 2) *\r\n        Math.tan(\r\n          ((isOnRight ? arrowRotation : 180 - arrowRotation) * Math.PI) / 180\r\n        );\r\n    left = ideaLeft + (isOnRight ? width : 0);\r\n  }\r\n  return [top, left].map(Math.round);\r\n}\r\n\r\nconst FreeFormIdeas = () => {\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  const { ideas, ideasDispatch, selectedId, setSelectedId } = useContext(\r\n    IdeaContext\r\n  );\r\n  const selectedIdea = ideas[selectedId];\r\n\r\n  const [coords, setCoords] = useState({ top: 0, left: 0 });\r\n\r\n  const [showIdeaModal, setShowIdeaModal] = useState(false);\r\n  const ideaModalShow = useCallback(() => setShowIdeaModal(true), []);\r\n  const ideaModalHide = useCallback(() => setShowIdeaModal(false), []);\r\n\r\n  const [linkerEnd, setLinkerEnd] = useState();\r\n  const [linkerStart, setlinkerStart] = useState();\r\n  const [linkingState, setLinkingState] = useState(false);\r\n  const linkBreak = useCallback(() => setLinkingState(false), []);\r\n\r\n  const domElement = useRef();\r\n  const [canvasOffset, setcanvasOffset] = useState(60);\r\n  const updateCanvasOffset = () => {\r\n    setcanvasOffset(domElement.current.getBoundingClientRect().y);\r\n  };\r\n\r\n  const handleLinkAdjust = useCallback(\r\n    (startId, endId, start, end) => {\r\n      ideasDispatch({type: \"deleteLink\", ideaId: startId, linkToRemove: endId})\r\n      setLinkerEnd(end);\r\n      setlinkerStart(start);\r\n      setLinkingState(true);\r\n  },[ideasDispatch]);\r\n\r\n  const handleLinkStart = useCallback(\r\n    (e) => {\r\n      console.log(selectedIdea);\r\n      setLinkerEnd([e.clientY - canvasOffset, e.clientX]);\r\n      setlinkerStart([[selectedIdea.top, selectedIdea.left]])\r\n      setLinkingState(true);\r\n    },\r\n    [canvasOffset, selectedIdea]\r\n  );\r\n\r\n  const adjustLinker = useCallback(\r\n    (e) => {\r\n      if (!linkingState) return;\r\n      setLinkerEnd([e.clientY - canvasOffset, e.clientX]);\r\n    },\r\n    [linkingState, canvasOffset]\r\n  );\r\n\r\n  const handleLinkEnd = useCallback(\r\n    (ideaId) => {\r\n      setLinkingState(false);\r\n      if (ideaId === selectedId || !linkingState) return;\r\n      ideasDispatch({ type: \"createLink\", fromId: selectedId, toId: ideaId });\r\n    },\r\n    [selectedId, linkingState, ideasDispatch]\r\n  );\r\n\r\n  const [, drop] = useDrop({\r\n    accept: ItemTypes.IDEA,\r\n    drop(item, monitor) {\r\n      const delta = monitor.getDifferenceFromInitialOffset();\r\n      const left = Math.round(item.left + delta.x);\r\n      const top = Math.round(item.top + delta.y);\r\n      ideasDispatch({\r\n        type: \"update\",\r\n        ideaId: item.ideaId,\r\n        data: { left, top },\r\n      });\r\n    },\r\n  });\r\n\r\n  const editIdea = useCallback(\r\n    (ideaId) => {\r\n      setSelectedId(ideaId);\r\n      ideaModalShow(true);\r\n    },\r\n    [ideaModalShow, setSelectedId]\r\n  );\r\n\r\n  const handleDoubleClick = useCallback(\r\n    (e) => {\r\n      if (e.target.className !== \"FreeFormIdeas\") return;\r\n      e.preventDefault();\r\n      setCoords({ top: e.clientY - canvasOffset, left: e.clientX });\r\n      console.log(ideas)\r\n      setSelectedId(uuidv4());\r\n      setTimeout(ideaModalShow, 300);\r\n    },\r\n    [ideas, ideaModalShow, setSelectedId, canvasOffset]\r\n  );\r\n\r\n  const handleIdeaChange = useCallback(\r\n    (idea) => {\r\n      ideaModalHide();\r\n      if (idea.content === \"\") return;\r\n      if (!idea.ideaId) {\r\n        ideasDispatch({\r\n          type: \"createIdea\",\r\n          ideaId: selectedId,\r\n          data: update(idea, { $merge: coords }),\r\n        });\r\n        return;\r\n      }\r\n      ideasDispatch({ type: \"update\", ideaId: selectedId, data: idea });\r\n    },\r\n    [coords, selectedId, ideasDispatch, ideaModalHide]\r\n  );\r\n\r\n  const domElementRef = useCallback(\r\n    (domElementReference) => {\r\n      domElement.current = domElementReference;\r\n      updateCanvasOffset();\r\n      drop(domElementReference);\r\n    },\r\n    [drop]\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateCanvasOffset);\r\n    return () => {\r\n      window.removeEventListener(\"resize\", updateCanvasOffset);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={domElementRef}\r\n      className=\"FreeFormIdeas\"\r\n      style={{ background: theme.freeFormIdeasColor }}\r\n      onDoubleClick={handleDoubleClick}\r\n      onMouseUp={linkBreak}\r\n      onMouseMove={adjustLinker}\r\n    >\r\n      {showIdeaModal && (\r\n        <Modal onClose={ideaModalHide}>\r\n          <IdeaForm onSubmit={handleIdeaChange} idea={selectedIdea} />\r\n        </Modal>\r\n      )}\r\n      {Object.entries(ideas).map(([key, idea]) => (\r\n        <Idea\r\n          key={key}\r\n          onEdit={editIdea}\r\n          onSelect={setSelectedId}\r\n          selected={idea.ideaId === selectedId}\r\n          onLinkStart={handleLinkStart}\r\n          onLinkEnd={handleLinkEnd}\r\n          {...idea}\r\n        />\r\n      ))}\r\n      {Array.from(selectedIdea?.linkList || [], (endId) => {\r\n        const arrowHeight =\r\n          ideas[endId].top +\r\n          ideas[endId].height / 2 -\r\n          (selectedIdea.top + selectedIdea.height / 2);\r\n        const arrowWidth =\r\n          ideas[endId].left +\r\n          ideas[endId].width / 2 -\r\n          (selectedIdea.left + selectedIdea.width / 2);\r\n        const arrowRotationStart =\r\n          (180 / Math.PI) * Math.atan2(arrowHeight, arrowWidth);\r\n        const arrowRotationEnd =\r\n          arrowRotationStart - 180 * Math.sign(arrowRotationStart);\r\n        return (\r\n          <Arrow\r\n            key={`${selectedId} -> ${endId}`}\r\n            startId = {selectedId}\r\n            endId = {endId}\r\n            start={calcCoords(selectedIdea, arrowRotationStart)}\r\n            end={calcCoords(ideas[endId], arrowRotationEnd)}\r\n            onLinkAdjust={handleLinkAdjust}\r\n          />\r\n        );\r\n      })}\r\n      {linkingState && (\r\n        <div className=\"linkingArrow\">\r\n          <Arrow\r\n            start={linkerStart}\r\n            end={linkerEnd}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FreeFormIdeas;\r\n"]},"metadata":{},"sourceType":"module"}