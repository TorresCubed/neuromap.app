{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from \"react\";\nimport update from \"immutability-helper\";\nimport axios from \"axios\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"update\":\n      return update(state, {\n        [action.id]: {\n          $merge: action.data\n        }\n      });\n\n    case \"create\":\n      axios.post(\"http://localHost:9999/api/v1/ideas\", Object.assign({\n        id: action.id,\n        linkList: []\n      }, action.data)).then(res => console.log(\"successful addition\"));\n      return update(state, {\n        [action.id]: {\n          $set: Object.assign({\n            id: action.id,\n            linkList: new Set()\n          }, action.data)\n        }\n      });\n\n    case \"link\":\n      axios.put(`http://localHost:9999/api/v1/ideas/${action.fromId}`, {\n        content: \"action.content\",\n        top: action.top,\n        left: action.left,\n        link: action.toId\n      }, {\n        headers: {\n          \"Content-Type\": \"application/\"\n        }\n      }).then(res => console.log(res));\n      return update(state, {\n        [action.fromId]: {\n          linkList: {\n            $add: [action.toId]\n          }\n        }\n      });\n\n    case \"delete\":\n      axios.delete(`http://localHost:9999/api/v1/ideas/${action.deleteId}`).then(res => console.log(\"successful delete\"));\n      return update(state, {\n        $unset: [action.deleteId]\n      });\n\n    case \"initialIdeas\":\n      return update(state, {\n        $set: action.data\n      });\n\n    default:\n      throw new Error(`Unexpected action type: ${action.type}`);\n  }\n}\n\nexport function useIdeaManager() {\n  _s();\n\n  const [selectedId, setSelectedId] = useState(\"a\");\n  const [ideas, ideasDispatch] = useReducer(reducer, {});\n  useEffect(() => {\n    const ideasImport = {};\n    axios.get(\"http://localHost:9999/api/v1/ideas\").then(res => {\n      res.data.forEach(element => {\n        element.linkList = new Set(element.linkList);\n        ideasImport[element.id] = element;\n      });\n      ideasDispatch({\n        type: \"initialIdeas\",\n        data: ideasImport\n      });\n    });\n  }, []);\n  return {\n    ideas: ideas,\n    ideasDispatch: ideasDispatch,\n    selectedId: selectedId,\n    setSelectedId: setSelectedId\n  };\n}\n\n_s(useIdeaManager, \"Z0cV0aGZNHG/cy13ZIxAvJR5giA=\");\n\nexport const IdeaContext = /*#__PURE__*/React.createContext();","map":{"version":3,"sources":["C:/Users/torre/Documents/neuromap.app/src/main/frontend/src/IdeaContext.js"],"names":["React","useEffect","useReducer","useState","update","axios","reducer","state","action","type","id","$merge","data","post","Object","assign","linkList","then","res","console","log","$set","Set","put","fromId","content","top","left","link","toId","headers","$add","delete","deleteId","$unset","Error","useIdeaManager","selectedId","setSelectedId","ideas","ideasDispatch","ideasImport","get","forEach","element","IdeaContext","createContext"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\r\nimport update from \"immutability-helper\";\r\nimport axios from \"axios\";\r\n\r\nfunction reducer(state, action) {\r\n      switch (action.type) {\r\n        case \"update\":\r\n          return update(state, {\r\n            [action.id]: {\r\n              $merge: action.data,\r\n            },\r\n          });\r\n        case \"create\":\r\n          axios.post(\"http://localHost:9999/api/v1/ideas\", \r\n                    Object.assign({\r\n                      id:action.id,linkList: []}, action.data)\r\n          ).then(res => console.log(\"successful addition\"))\r\n          return update(state, {\r\n            [action.id]: {\r\n              $set: Object.assign(\r\n                { id: action.id, linkList: new Set() },\r\n                action.data\r\n              ),\r\n            },\r\n          });\r\n        case \"link\":\r\n          axios.put(`http://localHost:9999/api/v1/ideas/${action.fromId}`,{\r\n            content:\"action.content\",\r\n            top:action.top,\r\n            left:action.left,\r\n            link:action.toId\r\n          }, {\r\n            headers: {\"Content-Type\" : \"application/\"}\r\n          }).then(res => console.log(res))\r\n          return update(state, {\r\n            [action.fromId]: {\r\n              linkList: { $add: [action.toId] },\r\n            },\r\n          });\r\n        case \"delete\":\r\n          axios.delete(`http://localHost:9999/api/v1/ideas/${action.deleteId}`)\r\n          .then(res => console.log(\"successful delete\"))\r\n          return update(state, \r\n            {$unset: [action.deleteId]}\r\n          )\r\n        case \"initialIdeas\":\r\n            return update(state, {\r\n              $set:action.data\r\n            });\r\n        default:\r\n          throw new Error(`Unexpected action type: ${action.type}`);\r\n      }\r\n    }\r\n\r\nexport function useIdeaManager() {\r\n  const [selectedId, setSelectedId] = useState(\"a\");\r\n\r\n  const [ideas, ideasDispatch] = useReducer(reducer, {});\r\n  \r\n  useEffect(() => {\r\n    const ideasImport = {};\r\n    axios.get(\"http://localHost:9999/api/v1/ideas\").then(\r\n      res =>{\r\n        res.data.forEach(element => {\r\n        element.linkList = new Set(element.linkList)\r\n        ideasImport[element.id] = element;\r\n      });\r\n      \r\n        ideasDispatch({\r\n          type: \"initialIdeas\",\r\n          data: ideasImport\r\n        });\r\n      }\r\n    )\r\n    \r\n  }, [])\r\n\r\n  return {\r\n    ideas: ideas,\r\n    ideasDispatch: ideasDispatch,\r\n    selectedId: selectedId,\r\n    setSelectedId: setSelectedId,\r\n  };\r\n}\r\n\r\nexport const IdeaContext = React.createContext();\r\n"]},"metadata":{},"sourceType":"module"}