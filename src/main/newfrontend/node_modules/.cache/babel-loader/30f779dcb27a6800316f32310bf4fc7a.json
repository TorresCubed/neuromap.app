{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer, useState } from \"react\";\nimport update from \"immutability-helper\";\nimport axios from \"axios\";\nexport function useIdeaManager() {\n  _s();\n\n  const [selectedId, setSelectedId] = useState(\"a\");\n  const [ideas, ideasDispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"update\":\n        return update(state, {\n          [action.id]: {\n            $merge: action.data\n          }\n        });\n\n      case \"create\":\n        axios.post(\"http://localHost:9999/api/v1/ideas\", Object.assign({\n          id: action.id,\n          linkList: new Set()\n        }, action.data));\n        return update(state, {\n          [action.id]: {\n            $set: Object.assign({\n              id: action.id,\n              linkList: new Set()\n            }, action.data)\n          }\n        });\n\n      case \"link\":\n        return update(state, {\n          [action.fromId]: {\n            linkList: {\n              $add: [action.toId]\n            }\n          }\n        });\n\n      case \"initialIdeas\":\n        return update(state, {\n          [action.id]: {\n            $set: Object.assign({\n              linkList: new Set()\n            }, action.data)\n          }\n        });\n\n      case \"initialLinks\":\n        return update(state, action.data);\n\n      default:\n        throw new Error(`Unexpected action type: ${action.type}`);\n    }\n  }, // {}\n  {\n    a: {\n      id: \"a\",\n      top: 20,\n      left: 80,\n      content: \"Here is an Example to get you Started\",\n      linkList: new Set(\"b\")\n    },\n    b: {\n      id: \"b\",\n      top: 180,\n      left: 20,\n      content: \"Great Idea!\",\n      linkList: new Set()\n    }\n  }); // useEffect(() => {\n  //   const ideasImport = {};\n  //   axios.get(\"http://localHost:9999/api/v1/ideas\").then(\n  //     res =>{res.data.forEach(element => {\n  //       ideasImport[element.id] = element;\n  //     });\n  //       ideasDispatch({\n  //         type: \"initialIdeas\",\n  //         data: ideasImport\n  //       });\n  //     }\n  //   )\n  // }, [])\n\n  return {\n    ideas: ideas,\n    ideasDispatch: ideasDispatch,\n    selectedId: selectedId,\n    setSelectedId: setSelectedId\n  };\n}\n\n_s(useIdeaManager, \"M8yq/YwEOZHCPBKvBMOIZWUrNCo=\");\n\nexport const IdeaContext = /*#__PURE__*/React.createContext();","map":{"version":3,"sources":["C:/Users/torre/Documents/neuromap.app/src/main/frontend/src/IdeaContext.js"],"names":["React","useEffect","useReducer","useState","update","axios","useIdeaManager","selectedId","setSelectedId","ideas","ideasDispatch","state","action","type","id","$merge","data","post","Object","assign","linkList","Set","$set","fromId","$add","toId","Error","a","top","left","content","b","IdeaContext","createContext"],"mappings":"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","sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\r\nimport update from \"immutability-helper\";\r\nimport axios from \"axios\";\r\n\r\nexport function useIdeaManager() {\r\n  const [selectedId, setSelectedId] = useState(\"a\");\r\n\r\n  \r\n\r\n  const [ideas, ideasDispatch] = useReducer(\r\n    (state, action) => {\r\n      switch (action.type) {\r\n        case \"update\":\r\n          return update(state, {\r\n            [action.id]: {\r\n              $merge: action.data,\r\n            },\r\n          });\r\n        case \"create\":\r\n          axios.post(\"http://localHost:9999/api/v1/ideas\", \r\n                    Object.assign({\r\n                      id:action.id,linkList:new Set()}, action.data)\r\n          )\r\n          return update(state, {\r\n            [action.id]: {\r\n              $set: Object.assign(\r\n                { id: action.id, linkList: new Set() },\r\n                action.data\r\n              ),\r\n            },\r\n          });\r\n        case \"link\":\r\n          return update(state, {\r\n            [action.fromId]: {\r\n              linkList: { $add: [action.toId] },\r\n            },\r\n          });\r\n        case \"initialIdeas\":\r\n          return update(state, {\r\n            [action.id]: {\r\n              $set: Object.assign(\r\n                {linkList: new Set()}, \r\n                action.data\r\n              )\r\n            },\r\n          });\r\n          case \"initialLinks\":\r\n            return update(state, action.data);\r\n        default:\r\n          throw new Error(`Unexpected action type: ${action.type}`);\r\n      }\r\n    },\r\n    // {}\r\n    {\r\n      a: {\r\n        id: \"a\",\r\n        top: 20,\r\n        left: 80,\r\n        content: \"Here is an Example to get you Started\",\r\n        linkList: new Set(\"b\"),\r\n      },\r\n      b: {\r\n        id: \"b\",\r\n        top: 180,\r\n        left: 20,\r\n        content: \"Great Idea!\",\r\n        linkList: new Set(),\r\n      },\r\n    },\r\n  )\r\n  \r\n  // useEffect(() => {\r\n  //   const ideasImport = {};\r\n  //   axios.get(\"http://localHost:9999/api/v1/ideas\").then(\r\n  //     res =>{res.data.forEach(element => {\r\n  //       ideasImport[element.id] = element;\r\n  //     });\r\n      \r\n  //       ideasDispatch({\r\n  //         type: \"initialIdeas\",\r\n  //         data: ideasImport\r\n  //       });\r\n  //     }\r\n  //   )\r\n    \r\n  // }, [])\r\n\r\n  return {\r\n    ideas: ideas,\r\n    ideasDispatch: ideasDispatch,\r\n    selectedId: selectedId,\r\n    setSelectedId: setSelectedId,\r\n  };\r\n}\r\n\r\nexport const IdeaContext = React.createContext();\r\n"]},"metadata":{},"sourceType":"module"}