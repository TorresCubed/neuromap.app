{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useReducer, useState } from \"react\";\nimport update from \"immutability-helper\";\nexport function useIdeaManager() {\n  _s();\n\n  const [selectedId, setSelectedId] = useState(\"a\");\n  const [ideas, ideasDispatch] = useReducer((state, action) => {\n    switch (action.type) {\n      case \"update\":\n        return update(state, {\n          [action.id]: {\n            $merge: action.data\n          }\n        });\n\n      case \"create\":\n        return update(state, {\n          [action.id]: {\n            $set: Object.assign({\n              id: action.id,\n              linkList: new Set()\n            }, action.data)\n          }\n        });\n\n      case \"link\":\n        return update(state, {\n          [action.fromId]: {\n            linkList: {\n              $add: [action.toId]\n            }\n          }\n        });\n\n      default:\n        throw new Error(`Unexpected action type: ${action.type}`);\n    }\n  }, {\n    a: {\n      id: \"a\",\n      top: 20,\n      left: 80,\n      title: \"Here is an Example to get you Started\",\n      linkList: new Set(\"b\")\n    },\n    b: {\n      id: \"b\",\n      top: 180,\n      left: 20,\n      title: \"Great Idea!\",\n      linkList: new Set()\n    }\n  });\n  return {\n    ideas: ideas,\n    ideasDispatch: ideasDispatch,\n    selectedId: selectedId,\n    setSelectedId: setSelectedId\n  };\n}\n\n_s(useIdeaManager, \"JEtARyQ/gt6snzD4mYHwmBeIGUQ=\");\n\nexport const IdeaContext = /*#__PURE__*/React.createContext();","map":{"version":3,"sources":["C:/Users/torre/Desktop/neuroMap.app/src/IdeaContext.js"],"names":["React","useReducer","useState","update","useIdeaManager","selectedId","setSelectedId","ideas","ideasDispatch","state","action","type","id","$merge","data","$set","Object","assign","linkList","Set","fromId","$add","toId","Error","a","top","left","title","b","IdeaContext","createContext"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,OAAO,SAASC,cAAT,GAA0B;AAAA;;AAC/B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,QAAQ,CAAC,GAAD,CAA5C;AAEA,QAAM,CAACK,KAAD,EAAQC,aAAR,IAAyBP,UAAU,CACvC,CAACQ,KAAD,EAAQC,MAAR,KAAmB;AACjB,YAAQA,MAAM,CAACC,IAAf;AACE,WAAK,QAAL;AACE,eAAOR,MAAM,CAACM,KAAD,EAAQ;AACnB,WAACC,MAAM,CAACE,EAAR,GAAa;AACXC,YAAAA,MAAM,EAAEH,MAAM,CAACI;AADJ;AADM,SAAR,CAAb;;AAKF,WAAK,QAAL;AACE,eAAOX,MAAM,CAACM,KAAD,EAAQ;AACnB,WAACC,MAAM,CAACE,EAAR,GAAa;AACXG,YAAAA,IAAI,EAAEC,MAAM,CAACC,MAAP,CACJ;AAAEL,cAAAA,EAAE,EAAEF,MAAM,CAACE,EAAb;AAAiBM,cAAAA,QAAQ,EAAE,IAAIC,GAAJ;AAA3B,aADI,EAEJT,MAAM,CAACI,IAFH;AADK;AADM,SAAR,CAAb;;AAQF,WAAK,MAAL;AACE,eAAOX,MAAM,CAACM,KAAD,EAAQ;AACnB,WAACC,MAAM,CAACU,MAAR,GAAiB;AACfF,YAAAA,QAAQ,EAAE;AAAEG,cAAAA,IAAI,EAAE,CAACX,MAAM,CAACY,IAAR;AAAR;AADK;AADE,SAAR,CAAb;;AAKF;AACE,cAAM,IAAIC,KAAJ,CAAW,2BAA0Bb,MAAM,CAACC,IAAK,EAAjD,CAAN;AAvBJ;AAyBD,GA3BsC,EA4BvC;AACEa,IAAAA,CAAC,EAAE;AACDZ,MAAAA,EAAE,EAAE,GADH;AAEDa,MAAAA,GAAG,EAAE,EAFJ;AAGDC,MAAAA,IAAI,EAAE,EAHL;AAIDC,MAAAA,KAAK,EAAE,uCAJN;AAKDT,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQ,GAAR;AALT,KADL;AAQES,IAAAA,CAAC,EAAE;AACDhB,MAAAA,EAAE,EAAE,GADH;AAEDa,MAAAA,GAAG,EAAE,GAFJ;AAGDC,MAAAA,IAAI,EAAE,EAHL;AAIDC,MAAAA,KAAK,EAAE,aAJN;AAKDT,MAAAA,QAAQ,EAAE,IAAIC,GAAJ;AALT;AARL,GA5BuC,CAAzC;AA8CA,SAAO;AACLZ,IAAAA,KAAK,EAAEA,KADF;AAELC,IAAAA,aAAa,EAAEA,aAFV;AAGLH,IAAAA,UAAU,EAAEA,UAHP;AAILC,IAAAA,aAAa,EAAEA;AAJV,GAAP;AAMD;;GAvDeF,c;;AAyDhB,OAAO,MAAMyB,WAAW,gBAAG7B,KAAK,CAAC8B,aAAN,EAApB","sourcesContent":["import React, { useReducer, useState } from \"react\";\r\nimport update from \"immutability-helper\";\r\n\r\nexport function useIdeaManager() {\r\n  const [selectedId, setSelectedId] = useState(\"a\");\r\n\r\n  const [ideas, ideasDispatch] = useReducer(\r\n    (state, action) => {\r\n      switch (action.type) {\r\n        case \"update\":\r\n          return update(state, {\r\n            [action.id]: {\r\n              $merge: action.data,\r\n            },\r\n          });\r\n        case \"create\":\r\n          return update(state, {\r\n            [action.id]: {\r\n              $set: Object.assign(\r\n                { id: action.id, linkList: new Set() },\r\n                action.data\r\n              ),\r\n            },\r\n          });\r\n        case \"link\":\r\n          return update(state, {\r\n            [action.fromId]: {\r\n              linkList: { $add: [action.toId] },\r\n            },\r\n          });\r\n        default:\r\n          throw new Error(`Unexpected action type: ${action.type}`);\r\n      }\r\n    },\r\n    {\r\n      a: {\r\n        id: \"a\",\r\n        top: 20,\r\n        left: 80,\r\n        title: \"Here is an Example to get you Started\",\r\n        linkList: new Set(\"b\"),\r\n      },\r\n      b: {\r\n        id: \"b\",\r\n        top: 180,\r\n        left: 20,\r\n        title: \"Great Idea!\",\r\n        linkList: new Set(),\r\n      },\r\n    }\r\n  );\r\n\r\n  return {\r\n    ideas: ideas,\r\n    ideasDispatch: ideasDispatch,\r\n    selectedId: selectedId,\r\n    setSelectedId: setSelectedId,\r\n  };\r\n}\r\n\r\nexport const IdeaContext = React.createContext();\r\n"]},"metadata":{},"sourceType":"module"}